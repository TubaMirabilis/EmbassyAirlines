// <auto-generated />
using System;
using System.Collections.Generic;
using Aircraft.Api.Lambda.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aircraft.Api.Lambda.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610080425_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aircraft.Api.Lambda.Aircraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EquipmentCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("equipment_code");

                    b.Property<string>("TailNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("tail_number");

                    b.ComplexProperty<Dictionary<string, object>>("DryOperatingWeight", "Aircraft.Api.Lambda.Aircraft.DryOperatingWeight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Kilograms")
                                .HasColumnType("integer")
                                .HasColumnName("dry_operating_weight_kilograms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaximumFuelWeight", "Aircraft.Api.Lambda.Aircraft.MaximumFuelWeight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Kilograms")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_fuel_weight_kilograms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaximumLandingWeight", "Aircraft.Api.Lambda.Aircraft.MaximumLandingWeight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Kilograms")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_landing_weight_kilograms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaximumTakeoffWeight", "Aircraft.Api.Lambda.Aircraft.MaximumTakeoffWeight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Kilograms")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_takeoff_weight_kilograms");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("MaximumZeroFuelWeight", "Aircraft.Api.Lambda.Aircraft.MaximumZeroFuelWeight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Kilograms")
                                .HasColumnType("integer")
                                .HasColumnName("maximum_zero_fuel_weight_kilograms");
                        });

                    b.HasKey("Id")
                        .HasName("pk_aircraft");

                    b.ToTable("aircraft", (string)null);
                });

            modelBuilder.Entity("Aircraft.Api.Lambda.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AircraftId")
                        .HasColumnType("uuid")
                        .HasColumnName("aircraft_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<char>("Letter")
                        .HasColumnType("character(1)")
                        .HasColumnName("letter");

                    b.Property<byte>("RowNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("row_number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_seats");

                    b.HasIndex("AircraftId")
                        .HasDatabaseName("ix_seats_aircraft_id");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("Aircraft.Api.Lambda.Seat", b =>
                {
                    b.HasOne("Aircraft.Api.Lambda.Aircraft", null)
                        .WithMany("Seats")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seats_aircraft_aircraft_id");
                });

            modelBuilder.Entity("Aircraft.Api.Lambda.Aircraft", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
