// <auto-generated />
using System;
using System.Collections.Generic;
using Flights.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Flights.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Flights.Api.Aircraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EquipmentCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("equipment_code");

                    b.Property<string>("TailNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("tail_number");

                    b.HasKey("Id")
                        .HasName("pk_aircraft");

                    b.ToTable("aircraft", (string)null);
                });

            modelBuilder.Entity("Flights.Api.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("iata_code");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("icao_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("time_zone_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_airports");

                    b.ToTable("airports", (string)null);
                });

            modelBuilder.Entity("Flights.Api.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AircraftId")
                        .HasColumnType("uuid")
                        .HasColumnName("aircraft_id");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("arrival_airport_id");

                    b.Property<LocalDateTime>("ArrivalLocalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("arrival_local_time");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uuid")
                        .HasColumnName("departure_airport_id");

                    b.Property<LocalDateTime>("DepartureLocalTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_local_time");

                    b.Property<string>("FlightNumberIata")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("flight_number_iata");

                    b.Property<string>("FlightNumberIcao")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("flight_number_icao");

                    b.Property<string>("SchedulingAmbiguityPolicy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("scheduling_ambiguity_policy");

                    b.ComplexProperty(typeof(Dictionary<string, object>), "BusinessPrice", "Flights.Api.Flight.BusinessPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("business_price_amount");
                        });

                    b.ComplexProperty(typeof(Dictionary<string, object>), "EconomyPrice", "Flights.Api.Flight.EconomyPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("economy_price_amount");
                        });

                    b.HasKey("Id")
                        .HasName("pk_flights");

                    b.HasIndex("AircraftId")
                        .HasDatabaseName("ix_flights_aircraft_id");

                    b.HasIndex("ArrivalAirportId")
                        .HasDatabaseName("ix_flights_arrival_airport_id");

                    b.HasIndex("DepartureAirportId")
                        .HasDatabaseName("ix_flights_departure_airport_id");

                    b.ToTable("flights", (string)null);
                });

            modelBuilder.Entity("Flights.Api.Flight", b =>
                {
                    b.HasOne("Flights.Api.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_aircraft_aircraft_id");

                    b.HasOne("Flights.Api.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_airports_arrival_airport_id");

                    b.HasOne("Flights.Api.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_flights_airports_departure_airport_id");

                    b.Navigation("Aircraft");

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });
#pragma warning restore 612, 618
        }
    }
}
