name: CI-CD Pipe

on:
    push:
        branches:
            - "main"

env:
    DOTNET_VERSION: "10.0.x"

jobs:
    Terraform:
        name: Terraform Check
        runs-on: ubuntu-22.04
        steps:
            - name: Checkout
              uses: actions/checkout@v5
            - name: Terraform Check
              run: terraform fmt -check=true -recursive

    Prettier:
        name: Prettier Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v5
            - name: Prettier Check
              run: npx prettier --check .

    DotNet:
        name: DotNet Build and Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v5
            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}
            - name: DotNet Format
              run: dotnet format --verify-no-changes
            - name: DotNet Build
              run: dotnet build --configuration Release --no-restore
            - name: DotNet Test
              run: dotnet test -v d --configuration Release --no-restore --no-build

    Deploy:
        name: Deploy
        needs: [Terraform, Prettier, DotNet]
        runs-on: ubuntu-latest
        env:
            AWS_REGION: eu-west-2
            ECR_REPO_NAME: embassy-web
        steps:
            - name: Checkout
              uses: actions/checkout@v5
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}
            - name: Terraform Init (with module git auth)
              working-directory: terraform
              env:
                  TF_MODULE_KEY: ${{ secrets.TF_MODULE_KEY }}
              run: |
                  # Configure git to use TF_MODULE_KEY only during init to fetch private modules
                  git config --global url."https://${TF_MODULE_KEY}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
                  terraform init -input=false
                  # Remove temporary git config so subsequent steps fall back to default token
                  git config --global --unset-all url."https://${TF_MODULE_KEY}:x-oauth-basic@github.com/".insteadOf || true
            - name: Terraform Apply
              working-directory: terraform
              run: terraform apply -auto-approve -input=false
            - name: Resolve ECR Repository URI
              id: ecr
              run: |
                  set -e
                  echo "Resolving ECR repository URI for: ${ECR_REPO_NAME}"
                  for i in {1..10}; do
                    REPO_URI=$(aws ecr describe-repositories --repository-names "${ECR_REPO_NAME}" --query 'repositories[0].repositoryUri' --output text 2>/dev/null || true)
                    if [ -n "$REPO_URI" ] && [ "$REPO_URI" != "None" ]; then
                      break
                    fi
                    echo "Repository not yet available, retry $i/10..."
                    sleep 6
                  done
                  if [ -z "$REPO_URI" ] || [ "$REPO_URI" = "None" ]; then
                    echo "Failed to resolve ECR repository URI" >&2
                    exit 1
                  fi
                  echo "Resolved URI: $REPO_URI"
                  echo "repo_uri=$REPO_URI" >> $GITHUB_OUTPUT
            - name: Login to ECR
              run: |
                  aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$(echo '${{ steps.ecr.outputs.repo_uri }}' | cut -d'/' -f1)"
            - name: Build Example API Lambda Image
              run: |
                  IMAGE_URI="${{ steps.ecr.outputs.repo_uri }}"
                  LATEST_TAG="${IMAGE_URI}:latest"
                  docker build -f docker/Example.Api.Lambda.dockerfile -t "$LATEST_TAG" .
                  echo "Built image tag: $LATEST_TAG"
            - name: Push Image
              run: |
                  IMAGE_URI="${{ steps.ecr.outputs.repo_uri }}"
                  docker push "${IMAGE_URI}:latest"
            - name: Summarize Image
              run: |
                  echo "Image pushed (latest): ${{ steps.ecr.outputs.repo_uri }}:latest" >> $GITHUB_STEP_SUMMARY
